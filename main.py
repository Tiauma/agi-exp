import numpy as np
from walk import Simulation  # –í–∞—à –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π
from energy_impact import ActiveInferenceAgent  # –§–∞–π–ª —Å –∞–≥–µ–Ω—Ç–æ–º
import matplotlib.pyplot as plt

def run_simulation():
    # –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
    sim = Simulation()
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    agent = ActiveInferenceAgent(sim)
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ —Å –∞–≥–µ–Ω—Ç–æ–º Active Inference!")
    print("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞:")
    print(f"- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏: {agent.prior_preferences['energy_gain']}")
    print(f"- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {agent.prior_preferences['exploration']}")
    print(f"- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {agent.prior_preferences['safety']}")
    print("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞...")
    input()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–ø–∏–∑–æ–¥
    results = agent.run_episode(max_steps=500, render=True)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–ø–∏–∑–æ–¥–∞:")
    print(f"–®–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {results['step']}")
    print(f"–§–∏–Ω–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è: {results['energy']:.1f}")
    print(f"–ù–∞–π–¥–µ–Ω–æ –µ–¥—ã: {results['food_found']}")
    print(f"–°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π —Å –æ–ø–∞—Å–Ω–æ—Å—Ç—è–º–∏: {results['dangers_encountered']}")
    print(f"–ü–æ—Å–µ—â–µ–Ω–æ –∫–ª–µ—Ç–æ–∫: {results['visited_cells']}")
    print(f"–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –º–∏—Ä–∞: {results['world_model_accuracy']:.3f}")
    print(f"–í–µ—Å–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏: {results['energy_model_weights']}")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º —É–±–µ–∂–¥–µ–Ω–∏—è
    print("\nüñºÔ∏è –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —É–±–µ–∂–¥–µ–Ω–∏–π –∞–≥–µ–Ω—Ç–∞...")
    fig = agent.visualize_beliefs()
    plt.show()
    
    # –ì—Ä–∞—Ñ–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏ –ø–æ —à–∞–≥–∞–º
    plt.figure(figsize=(10, 5))
    plt.plot(agent.history['energies'])
    plt.title('–≠–Ω–µ—Ä–≥–∏—è –∞–≥–µ–Ω—Ç–∞ –ø–æ —à–∞–≥–∞–º')
    plt.xlabel('–®–∞–≥')
    plt.ylabel('–≠–Ω–µ—Ä–≥–∏—è')
    plt.grid(True)
    plt.show()

def debug_single_step():
    """–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –ø–æ —à–∞–≥–∞–º"""
    sim = Simulation()
    agent = ActiveInferenceAgent(sim)
    
    print("üîç –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –ø–æ —à–∞–≥–∞–º")
    print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞, 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    
    step = 0
    while sim.agent_energy > 0:
        cmd = input(f"\n–®–∞–≥ {step} - –≠–Ω–µ—Ä–≥–∏—è: {sim.agent_energy:.1f} > ")
        if cmd.lower() == 'q':
            break
            
        action, prediction, error = agent.step()
        
        debug_info = agent.get_debug_info()
        print(f"–î–µ–π—Å—Ç–≤–∏–µ: {action}")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {error['total_error']:.3f}")
        print(f"–ü–æ–∑–∏—Ü–∏—è: {debug_info['position']}")
        print(f"–í–µ—Å–∞ –º–æ–¥–µ–ª–∏: {debug_info['energy_model_weights']}")
        
        step += 1

if __name__ == "__main__":
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1 - –ü–æ–ª–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è")
    print("2 –ü–æ—à–∞–≥–æ–≤–∞—è –æ—Ç–ª–∞–¥–∫–∞")
    
    choice = input("–í–∞—à –≤—ã–±–æ—Ä (1 –∏–ª–∏ 2): ")
    
    if choice == "2":
        debug_single_step()
    else:
        run_simulation()